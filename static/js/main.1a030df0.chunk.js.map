{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortType","goodsFromServer","App","useState","isStarted","setIsStarted","sortType","setSortType","isReverse","setIsReverse","minLength","setMinLength","goods","arr","copy","ALPABET","sort","a","b","localeCompare","LENGTH","length","NONE","reverse","filter","good","getSortedGoods","className","type","onClick","current","map","name","id","value","onChange","event","n","currentTarget","Array","fill","num","i","count","ReactDOM","render","document","getElementById"],"mappings":"6KAgBKA,E,oDAbCC,EAA4B,CAChC,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,W,SAGGD,O,eAAAA,I,qBAAAA,I,oBAAAA,M,KAiCE,IAAME,EAAgB,WAC3B,MAAkCC,oBAAS,GAA3C,mBAAOC,EAAP,KAAkBC,EAAlB,KAKA,EAAgCF,mBAAS,GAAzC,mBAAOG,EAAP,KAAiBC,EAAjB,KAUA,EAAkCJ,oBAAS,GAA3C,mBAAOK,EAAP,KAAkBC,EAAlB,KAUA,EAAkCN,mBAAS,GAA3C,mBAAOO,EAAP,KAAkBC,EAAlB,KAKMC,EA1DR,SACEC,EACAP,EACAE,EACAE,GAEA,IAAMI,EAAI,YAAOD,GAEjB,OAAQP,GACN,KAAKN,EAASe,QACZD,EAAKE,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAEE,cAAcD,MACpC,MACF,KAAKlB,EAASoB,OACZN,EAAKE,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAEI,OAASH,EAAEG,UAEnC,KAAKrB,EAASsB,MAShB,OAJId,GACFM,EAAKS,UAGAT,EAAKU,QAAO,SAAAC,GAAI,OAAIA,EAAKJ,QAAUX,KAkC5BgB,CAAezB,EAAiBK,EAAUE,EAAWE,GAEnE,OACE,sBAAKiB,UAAU,MAAf,WACIvB,GACA,wBACEwB,KAAK,SACLD,UAAU,4CACVE,QArCU,WAChBxB,GAAa,IAiCT,mBASDD,GACC,qCACE,wBACEwB,KAAK,SACLD,UAAS,4BAAuBrB,IAAaN,EAASe,QAAU,aAAe,IAC/Ec,QA1CW,WACnBtB,EAAYP,EAASe,UAsCf,iCAQA,wBACEa,KAAK,SACLD,UAAS,4BAAuBrB,IAAaN,EAASoB,OAAS,aAAe,IAC9ES,QA9CS,WACjBtB,EAAYP,EAASoB,SA0Cf,4BAQA,wBACEQ,KAAK,SACLD,UAAS,4BAAuBnB,EAAY,aAAe,IAC3DqB,QAjDU,WAClBpB,GAAa,SAAAqB,GAAO,OAAKA,MA6CnB,qBAQA,wBACEF,KAAK,SACLD,UAAU,8BACVE,QArDU,WAClBtB,EAAYP,EAASsB,MACrBb,GAAa,IAgDP,mBAQA,oBAAIkB,UAAU,QAAd,SACoB,IAAjBf,EAAMS,OAEH,6EAEG,IACAX,EACA,IAJH,aAQAE,EAAMmB,KAAI,SAAAN,GAAI,OACd,oBAAIE,UAAU,cAAd,SACGF,GAD8BA,QAMvC,qBAAKE,UAAU,SAAf,oDAGA,qBACEA,UAAU,SADZ,SAGE,wBACEK,KAAK,YACLC,GAAG,YACHC,MAAOxB,EACPyB,SAAU,SAACC,GAAD,OAhFCC,GAgFyBD,EAAME,cAAcJ,WA/ElEvB,EAAa0B,GADO,IAACA,GA4Eb,SAMGE,MAAM,IAAIC,KAAK,GAAGT,KAAI,SAACU,EAAKC,GAC3B,IAAMC,EAAQF,EAAMC,EAEpB,OACE,wBACER,MAAOS,EADT,SAIGA,GAFIA,iBCjKzBC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.1a030df0.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport './App.css';\n\nconst goodsFromServer: string[] = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nenum SortType {\n  NONE,\n  ALPABET,\n  LENGTH,\n}\n\nfunction getSortedGoods(\n  arr: string[],\n  sortType: SortType,\n  isReverse: boolean,\n  minLength: number,\n) {\n  const copy = [...arr];\n\n  switch (sortType) {\n    case SortType.ALPABET:\n      copy.sort((a, b) => a.localeCompare(b));\n      break;\n    case SortType.LENGTH:\n      copy.sort((a, b) => a.length - b.length);\n      break;\n    case SortType.NONE:\n    default:\n      break;\n  }\n\n  if (isReverse) {\n    copy.reverse();\n  }\n\n  return copy.filter(good => good.length >= minLength);\n}\n\nexport const App: React.FC = () => {\n  const [isStarted, setIsStarted] = useState(false);\n  const showGoods = () => {\n    setIsStarted(true);\n  };\n\n  const [sortType, setSortType] = useState(0);\n\n  const alphabetSort = () => {\n    setSortType(SortType.ALPABET);\n  };\n\n  const lengthSort = () => {\n    setSortType(SortType.LENGTH);\n  };\n\n  const [isReverse, setIsReverse] = useState(false);\n  const reverseSort = () => {\n    setIsReverse(current => !current);\n  };\n\n  const defaultSort = () => {\n    setSortType(SortType.NONE);\n    setIsReverse(false);\n  };\n\n  const [minLength, setMinLength] = useState(1);\n  const minLengthSort = (n:number) => {\n    setMinLength(n);\n  };\n\n  const goods = getSortedGoods(goodsFromServer, sortType, isReverse, minLength);\n\n  return (\n    <div className=\"App\">\n      {!isStarted && (\n        <button\n          type=\"button\"\n          className=\"button is-success is-rounded is-fullwidth\"\n          onClick={showGoods}\n        >\n          Start\n        </button>\n      )}\n\n      {isStarted && (\n        <>\n          <button\n            type=\"button\"\n            className={`button is-rounded ${sortType === SortType.ALPABET ? 'is-success' : ''}`}\n            onClick={alphabetSort}\n          >\n            Sort alphabetically\n          </button>\n\n          <button\n            type=\"button\"\n            className={`button is-rounded ${sortType === SortType.LENGTH ? 'is-success' : ''}`}\n            onClick={lengthSort}\n          >\n            Sort by length\n          </button>\n\n          <button\n            type=\"button\"\n            className={`button is-rounded ${isReverse ? 'is-success' : ''}`}\n            onClick={reverseSort}\n          >\n            Reverse\n          </button>\n\n          <button\n            type=\"button\"\n            className=\"button is-rounded is-danger\"\n            onClick={defaultSort}\n          >\n            Reset\n          </button>\n\n          <ul className=\"Goods\">\n            {goods.length === 0\n              ? (\n                <strong>\n                  No goods to show with length of word of\n                  {' '}\n                  {minLength}\n                  {' '}\n                  letters\n                </strong>\n              )\n              : goods.map(good => (\n                <li className=\"Goods__item\" key={good}>\n                  {good}\n                </li>\n              ))}\n          </ul>\n\n          <div className=\"length\">\n            Select minimal length of word to sort:\n          </div>\n          <div\n            className=\"select\"\n          >\n            <select\n              name=\"maxLength\"\n              id=\"maxLength\"\n              value={minLength}\n              onChange={(event) => minLengthSort(+event.currentTarget.value)}\n            >\n              {Array(10).fill(1).map((num, i) => {\n                const count = num + i;\n\n                return (\n                  <option\n                    value={count}\n                    key={count}\n                  >\n                    {count}\n                  </option>\n                );\n              })}\n\n            </select>\n          </div>\n        </>\n      )}\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}